openapi: '3.0.2'
info:
  title: AIFEX OpenAPI
  version: '0.10.11'
servers:
  - url: http://localhost/api
paths:
  /ping:
    get:
      responses:
        '200':
          description: Check if the server is alive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
  /signup:
    description: Create a new account
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Account is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '403':
          description: Account cannot be created (forbidden UserName)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
  /signin:
    description: signin and get a bearer token (JWT)
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Returns JWT Token
          content:
            application/json:
              schema:
                type: object
                properties:
                  bearerToken:
                    type: string
        '403':
          description: Cannot sign (wrong username/password)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
  /account:
    get:
      responses:
        '200':
          description: Account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      security:
        - bearerAuth: []
  /websites:
    post:
      description: add a new WebSite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebSite'
      responses:
        '200':
          description: The WebSite id
          content:
            application/json:
              schema:
                type: object
                properties:
                  webSiteId:
                    type: string
        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      security:
        - bearerAuth: []
  /websites/{webSiteId}:
    get:
      description: returns WebSite 
      parameters:
        - in: path
          name: webSiteId
          schema:
            type: string
          required: true
          description: ID of the WebSite to get
      responses:
        '200':
          description: The WebSite
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/WebSite'
        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebSite'
      security:
        - bearerAuth: []
  /sessions:
    post:
      description: add a new session
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
      responses:
        '200':
          description: The Session id
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessionId:
                    type: string
        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      security:
        - bearerAuth: []        
  /sessions/{sessionId}:
    get:
      description: returns Session 
      parameters:
        - in: path
          name: sessionId
          schema:
            type: string
          required: true
          description: Id of the Session to get
      responses:
        '200':
          description: The Session
      security:
        - bearerAuth: []
  /sessions/{sessionId}/explorations:
    post:
      description: add a new /explorations
      parameters:
        - in: path
          name: sessionId
          schema:
            type: string
          required: true
          description: Id of the session
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                testerName:
                  type: string
                interactionList:
                  type: array
                  items:
                    type: object
                    properties:
                      concreteType:
                        type: string
                        enum: [Action, Comment, Answer]
                      kind:
                        type: string
                      value: 
                        type: string
                      date:
                        type: string
                startDate:
                  type: string
                stopDate:
                  type: string
      responses:
        '200':
          description: The number of exploration in the session
          content:
            application/json:
              schema:
                type: object
                properties:
                  explorationNumber:                
                    type: integer
        '400':
          description: Invalid parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      security:
        - bearerAuth: []
  /models:
    post:
      description: add a new model
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model'
      responses:
        '200':
          description: The Model id
          content:
            application/json:
              schema:
                type: object
                properties:
                  modelId:
                    type: string
        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      security:
        - bearerAuth: []    
  /models/{modelId}/link/{sessionId}:
    post:
      description: link the model to a session
      parameters:
        - in: path
          name: modelId
          schema:
            type: string
          required: true
          description: Id of the model
        - in: path
          name: sessionId
          schema:
            type: string
          required: true
          description: Id of the session
      responses:
        '200':
          description: The link is done
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '404':
          description: ModelNotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      security:
        - bearerAuth: []
  /models/{modelId}:
    get:
      description: returns Model 
      parameters:
        - in: path
          name: modelId
          schema:
            type: string
          required: true
          description: Id of the model to get
      responses:
        '200':
          description: The Model
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        '403':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      security:
        - bearerAuth: []
components:
  schemas:
    Message:
      type: object
      properties:
        message:
          type: string
    Account:
      type: object
      properties:
        username:
          type: string
        authorizationSet:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
              kind:
                type: string
                enum: [WebSite, Model, Session]
    WebSite:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
        mappingList:
          type: array
          items:
            type: object
            properties:
              match:
                type: object
                properties:
                  event:
                    type: string
                  css:
                    type: string
                  xpath:
                    type: string
                  code:
                    type: string
                  key:
                    type: string
              output:
                type: object
                properties:
                  prefix:
                    type: string
                  suffix:
                    type: string
              context:
                type: object
                properties:
                  url:
                    type: string
                  css:
                    type: string
                  xpath:
                    type: string
              description:
                type: string
    Session:
      type: object
      properties:
        webSiteId:
          type: string
        baseURL:
          type: string
        name:
          type: string
        overlayType:
          type: string
          enum: [shadow, bluesky, rainbow]
    Model:
      type: object
      properties:
        depth:
          type: integer
        interpolationfactor:
          type: integer
        predictionType:
          type: string
          enum: [CSP, SP, FIS]
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT   
      